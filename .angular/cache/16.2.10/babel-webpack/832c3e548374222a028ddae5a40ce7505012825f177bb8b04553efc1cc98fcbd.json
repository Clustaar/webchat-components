{"ast":null,"code":"import { ObfuscationIcons } from './obfuscation-icons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class ObfuscationPipe {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n    this.REGEX = /(\\*\\*)((basic_obfuscation_of|custom_obfuscation_of).*?)(\\*\\*)/g;\n  }\n  transform(html, textColor) {\n    html = html.replace(this.REGEX, value => {\n      const rules = value.replace(/\\*\\*/g, '').split('basic_obfuscation_of_');\n      if (rules.length > 1) {\n        switch (rules[1]) {\n          case 'email_address':\n            return this.buildObfuscatedIconSpan('Email', ObfuscationIcons.EMAIL, textColor);\n          case 'phone_number':\n            return this.buildObfuscatedIconSpan('Phone number', ObfuscationIcons.PHONE, textColor);\n          case 'credit_card_number':\n            return this.buildObfuscatedIconSpan('Credit Card', ObfuscationIcons.CB_CARD, textColor);\n          case 'social_security_number':\n            return this.buildObfuscatedIconSpan('FR SSN', ObfuscationIcons.SOCIAL, textColor);\n          default:\n            return value;\n        }\n      }\n      const customRules = value.replace(/\\*\\*/g, '').split('custom_obfuscation_of_');\n      if (customRules.length > 1) {\n        return this.buildObfuscatedIconSpan(customRules[1], ObfuscationIcons.CUSTOM, textColor);\n      }\n      return value;\n    });\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n  buildObfuscatedIconSpan(label, iconSvg, textColor) {\n    return `<span style=\"font-style: italic; font-weight: bold;\">${iconSvg.replace(\"#FFFFFF\", textColor)}${label}</span>`;\n  }\n  /** @nocollapse */\n  static #_ = this.ɵfac = function ObfuscationPipe_Factory(t) {\n    return new (t || ObfuscationPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n  /** @nocollapse */\n  static #_2 = this.ɵpipe = /** @pureOrBreakMyCode */i0.ɵɵdefinePipe({\n    name: \"obfuscation\",\n    type: ObfuscationPipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["ObfuscationIcons","ObfuscationPipe","constructor","sanitizer","REGEX","transform","html","textColor","replace","value","rules","split","length","buildObfuscatedIconSpan","EMAIL","PHONE","CB_CARD","SOCIAL","customRules","CUSTOM","bypassSecurityTrustHtml","label","iconSvg","i0","ɵɵdirectiveInject","i1","DomSanitizer","pure"],"sources":["/home/smez/apps/webchat-components/projects/clustaar-webchat-components/src/lib/obfuscation/obfuscation.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ObfuscationIcons } from './obfuscation-icons';\n\n@Pipe({\n  name: 'obfuscation'\n})\nexport class ObfuscationPipe implements PipeTransform {\n\n  REGEX = /(\\*\\*)((basic_obfuscation_of|custom_obfuscation_of).*?)(\\*\\*)/g;\n\n  constructor(private sanitizer: DomSanitizer) {\n  }\n\n  transform(html: string, textColor: string) {\n    html = html.replace(this.REGEX, (value) => {\n      const rules = value.replace(/\\*\\*/g, '').split('basic_obfuscation_of_');\n      if (rules.length > 1) {\n        switch (rules[1]) {\n          case 'email_address':\n            return this.buildObfuscatedIconSpan('Email', ObfuscationIcons.EMAIL, textColor)\n          case 'phone_number':\n            return this.buildObfuscatedIconSpan('Phone number', ObfuscationIcons.PHONE, textColor)\n          case 'credit_card_number':\n            return this.buildObfuscatedIconSpan('Credit Card', ObfuscationIcons.CB_CARD, textColor)\n          case 'social_security_number':\n            return this.buildObfuscatedIconSpan('FR SSN', ObfuscationIcons.SOCIAL, textColor)\n          default:\n            return value;\n        }\n      }\n      const customRules = value.replace(/\\*\\*/g, '').split('custom_obfuscation_of_');\n      if (customRules.length > 1) {\n        return this.buildObfuscatedIconSpan(customRules[1], ObfuscationIcons.CUSTOM, textColor)\n      }\n      return value;\n    })\n\n    return this.sanitizer.bypassSecurityTrustHtml(html)\n  }\n\n  private buildObfuscatedIconSpan(label: string, iconSvg: string, textColor: string) {\n    return `<span style=\"font-style: italic; font-weight: bold;\">${iconSvg.replace(\"#FFFFFF\", textColor)}${label}</span>`;\n  }\n}\n"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,qBAAqB;;;AAKtD,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,SAAuB;IAAvB,KAAAA,SAAS,GAATA,SAAS;IAF7B,KAAAC,KAAK,GAAG,gEAAgE;EAGxE;EAEAC,SAASA,CAACC,IAAY,EAAEC,SAAiB;IACvCD,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC,IAAI,CAACJ,KAAK,EAAGK,KAAK,IAAI;MACxC,MAAMC,KAAK,GAAGD,KAAK,CAACD,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACG,KAAK,CAAC,uBAAuB,CAAC;MACvE,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpB,QAAQF,KAAK,CAAC,CAAC,CAAC;UACd,KAAK,eAAe;YAClB,OAAO,IAAI,CAACG,uBAAuB,CAAC,OAAO,EAAEb,gBAAgB,CAACc,KAAK,EAAEP,SAAS,CAAC;UACjF,KAAK,cAAc;YACjB,OAAO,IAAI,CAACM,uBAAuB,CAAC,cAAc,EAAEb,gBAAgB,CAACe,KAAK,EAAER,SAAS,CAAC;UACxF,KAAK,oBAAoB;YACvB,OAAO,IAAI,CAACM,uBAAuB,CAAC,aAAa,EAAEb,gBAAgB,CAACgB,OAAO,EAAET,SAAS,CAAC;UACzF,KAAK,wBAAwB;YAC3B,OAAO,IAAI,CAACM,uBAAuB,CAAC,QAAQ,EAAEb,gBAAgB,CAACiB,MAAM,EAAEV,SAAS,CAAC;UACnF;YACE,OAAOE,KAAK;;;MAGlB,MAAMS,WAAW,GAAGT,KAAK,CAACD,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACG,KAAK,CAAC,wBAAwB,CAAC;MAC9E,IAAIO,WAAW,CAACN,MAAM,GAAG,CAAC,EAAE;QAC1B,OAAO,IAAI,CAACC,uBAAuB,CAACK,WAAW,CAAC,CAAC,CAAC,EAAElB,gBAAgB,CAACmB,MAAM,EAAEZ,SAAS,CAAC;;MAEzF,OAAOE,KAAK;IACd,CAAC,CAAC;IAEF,OAAO,IAAI,CAACN,SAAS,CAACiB,uBAAuB,CAACd,IAAI,CAAC;EACrD;EAEQO,uBAAuBA,CAACQ,KAAa,EAAEC,OAAe,EAAEf,SAAiB;IAC/E,OAAO,wDAAwDe,OAAO,CAACd,OAAO,CAAC,SAAS,EAAED,SAAS,CAAC,GAAGc,KAAK,SAAS;EACvH;;;qBApCWpB,eAAe,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;;;;UAAfzB,eAAe;IAAA0B,IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}